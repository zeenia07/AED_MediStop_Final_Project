/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package medistopUI.SystemAdminWorkArea;

import java.awt.CardLayout;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import medistopBackend.EcoSystem;
import medistopBackend.Funds.Donation.FundsInfo;
import medistopBackend.Hospital.Appointment.AppointmentDetails;

/**
 *
 * @author Virendra Rathore
 */
public class SystemAdminAnalyticsJPanel extends javax.swing.JPanel 
{
    private JPanel showPanel;
    private EcoSystem ecosystem;
    /**
     * Creates new form SystemAdminAnalyticsJPanel
     */
    public SystemAdminAnalyticsJPanel(JPanel showPanel, EcoSystem system) 
    {
        initComponents();
        this.showPanel = showPanel;
        this.ecosystem = system;
          
    }
    
    private void populateJTable(String name, float value)
    {
        DefaultTableModel model = (DefaultTableModel) tblToDisplayAnalytics.getModel();
        model.setRowCount(0);
        Object[] row = new Object[2];
        row[0] = name;
        row[1] = value;
        model.addRow(row);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnOrganisationWithMaximumFunds = new javax.swing.JButton();
        btnFrequentlyVisitedHospital = new javax.swing.JButton();
        btnPrimeDonor = new javax.swing.JButton();
        btnFrequentPatient = new javax.swing.JButton();
        btnFrequentlyVistedDoctor = new javax.swing.JButton();
        btnOrganisationWithMaximumDonors = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblToDisplayAnalytics = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder("Analytics Information"));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitle.setFont(new java.awt.Font("Songti TC", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 51, 153));
        lblTitle.setText("ANALYTICS");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 35, 170, -1));

        btnOrganisationWithMaximumFunds.setForeground(new java.awt.Color(0, 51, 153));
        btnOrganisationWithMaximumFunds.setText("Organisation With Maximum Funds");
        btnOrganisationWithMaximumFunds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrganisationWithMaximumFundsActionPerformed(evt);
            }
        });
        add(btnOrganisationWithMaximumFunds, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, 270, -1));

        btnFrequentlyVisitedHospital.setForeground(new java.awt.Color(0, 51, 153));
        btnFrequentlyVisitedHospital.setText("Frequently Visited Hospital");
        btnFrequentlyVisitedHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFrequentlyVisitedHospitalActionPerformed(evt);
            }
        });
        add(btnFrequentlyVisitedHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 255, 200, -1));

        btnPrimeDonor.setForeground(new java.awt.Color(0, 51, 153));
        btnPrimeDonor.setText("Prime Donor");
        btnPrimeDonor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeDonorActionPerformed(evt);
            }
        });
        add(btnPrimeDonor, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 350, 270, -1));

        btnFrequentPatient.setForeground(new java.awt.Color(0, 51, 153));
        btnFrequentPatient.setText("Frequent Patient");
        btnFrequentPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFrequentPatientActionPerformed(evt);
            }
        });
        add(btnFrequentPatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 200, -1));

        btnFrequentlyVistedDoctor.setForeground(new java.awt.Color(0, 51, 153));
        btnFrequentlyVistedDoctor.setText("Frequently visited Doctor");
        btnFrequentlyVistedDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFrequentlyVistedDoctorActionPerformed(evt);
            }
        });
        add(btnFrequentlyVistedDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 200, -1));

        btnOrganisationWithMaximumDonors.setForeground(new java.awt.Color(0, 51, 153));
        btnOrganisationWithMaximumDonors.setText("Organisation With Maximum Donors");
        btnOrganisationWithMaximumDonors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrganisationWithMaximumDonorsActionPerformed(evt);
            }
        });
        add(btnOrganisationWithMaximumDonors, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 250, -1, -1));

        tblToDisplayAnalytics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblToDisplayAnalytics);
        if (tblToDisplayAnalytics.getColumnModel().getColumnCount() > 0) {
            tblToDisplayAnalytics.getColumnModel().getColumn(0).setResizable(false);
            tblToDisplayAnalytics.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 86, 649, 107));

        btnBack.setForeground(new java.awt.Color(0, 51, 153));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnOrganisationWithMaximumFundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrganisationWithMaximumFundsActionPerformed
        Map<String,Float> funds = new HashMap<String, Float>();
        for (int i = 0; i < ecosystem.getDonationDirectory().getFundsDirectory().size(); i++) {
            FundsInfo fi=ecosystem.getDonationDirectory().getFundsDirectory().get(i);
            String name  = fi.getFundsOrgName();
            float amount = 0;
            if(funds.containsKey(name))
            {
                amount = funds.get(name);
            }
            
            amount = amount + Float.parseFloat(fi.getDonation());
            funds.put(name, amount);
        }  
        float maxFunds =0;
        String fundedOrg = new String();
        for(String s : funds.keySet())
        {
            if(funds.get(s) > maxFunds){
                maxFunds = funds.get(s);
                fundedOrg = s;
            }
        }
        
        populateJTable(fundedOrg+ "received maximum funds : ", maxFunds);
    }//GEN-LAST:event_btnOrganisationWithMaximumFundsActionPerformed

    private void btnFrequentlyVisitedHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFrequentlyVisitedHospitalActionPerformed
        Map<String,Integer> patient = new HashMap<String, Integer>();
   
        for (int i = 0; i < ecosystem.getAppointmentDirectory().getAppointmentDirectory().size(); i++) {
            AppointmentDetails ad=ecosystem.getAppointmentDirectory().getAppointmentDirectory().get(i);
            String nameOfHospital  = ad.getHospitalName();
            int  visitMadeByPatients = 0;
            if(patient.containsKey(ad.getHospitalName()))
            {
                visitMadeByPatients = patient.get(ad.getHospitalName());
            }
            visitMadeByPatients = visitMadeByPatients + 1;
            patient.put(nameOfHospital, visitMadeByPatients); 
        }
        
        float maxNumberOfVisits =0;
        String hospitalName = new String();
    
        for(String s : patient.keySet())
        {
            if(patient.get(s) > maxNumberOfVisits)
            {
                maxNumberOfVisits = patient.get(s);
                hospitalName = s;
            }
        }
   
        populateJTable(hospitalName + "is Frequently Visited Hospital: ", maxNumberOfVisits);
    }//GEN-LAST:event_btnFrequentlyVisitedHospitalActionPerformed

    private void btnPrimeDonorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeDonorActionPerformed
        Map<String,Float> donators = new HashMap<String, Float>();
        for (int i = 0; i < ecosystem.getDonationDirectory().getFundsDirectory().size(); i++) {
            FundsInfo fi=ecosystem.getDonationDirectory().getFundsDirectory().get(i);
            String donorsUserName  = fi.getDonor().getUsername();
            float amount = 0;
            if(donators.containsKey(fi.getDonor().getUsername()))
            {
                amount = donators.get(fi.getDonor().getUsername());
            }
            amount = amount + Float.parseFloat(fi.getDonation());
            donators.put(donorsUserName, amount);
        }
        float maxAmountDonated =0;
        String donorsNameWhoDonotedMaximumMoney = new String();
        for(String s : donators.keySet()){
            if(donators.get(s) > maxAmountDonated){
                maxAmountDonated = donators.get(s);
                donorsNameWhoDonotedMaximumMoney = s;
            }
        }
        
        populateJTable(donorsNameWhoDonotedMaximumMoney+ "Donated Maximum Amount: ", maxAmountDonated);
    }//GEN-LAST:event_btnPrimeDonorActionPerformed

    private void btnFrequentPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFrequentPatientActionPerformed
        Map<String,Integer> patient = new HashMap<String, Integer>();
        for (int i = 0; i < ecosystem.getAppointmentDirectory().getAppointmentDirectory().size(); i++) {
            AppointmentDetails ad=ecosystem.getAppointmentDirectory().getAppointmentDirectory().get(i);
            String patientsUserName  = ad.getPatient().getUsername();
            int  NumberOfVisitsMadeByPatient = 0;
            if(patient.containsKey(ad.getPatient().getUsername()))
            {
                NumberOfVisitsMadeByPatient = patient.get(ad.getPatient().getUsername());
            }
            NumberOfVisitsMadeByPatient = NumberOfVisitsMadeByPatient + 1;
            patient.put(patientsUserName, NumberOfVisitsMadeByPatient);    
        }
        
        float maxNumberOfVisits =0;
        String mostActivePatientName = new String();
        
        for(String s : patient.keySet())
        {
            if(patient.get(s) > maxNumberOfVisits)
            {
                maxNumberOfVisits = patient.get(s);
                mostActivePatientName = s;
            }
        }
        populateJTable(mostActivePatientName+ "is highly visited patient: ", maxNumberOfVisits);
    }//GEN-LAST:event_btnFrequentPatientActionPerformed

    private void btnFrequentlyVistedDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFrequentlyVistedDoctorActionPerformed
         Map<String,Integer> doctors = new HashMap<String, Integer>();
        for (int i = 0; i < ecosystem.getAppointmentDirectory().getAppointmentDirectory().size(); i++) {
            AppointmentDetails ad=ecosystem.getAppointmentDirectory().getAppointmentDirectory().get(i);
            String doctorsName  = ad.getDoctorName();
            int  visitMadeByPatient = 0;
            
            if(doctors.containsKey(ad.getDoctorName()))
            {
                visitMadeByPatient = doctors.get(ad.getDoctorName());
            }
            
            visitMadeByPatient = visitMadeByPatient + 1;
            doctors.put(doctorsName, visitMadeByPatient); 
        }
        
        float maxNumberOfVisits =0;
        String frequentlyVisitedDoctor = new String();
        for(String s : doctors.keySet())
        {
            if(doctors.get(s) > maxNumberOfVisits)
            {
                maxNumberOfVisits = doctors.get(s);
                frequentlyVisitedDoctor = s;
            }
        }
        
        populateJTable(frequentlyVisitedDoctor+ "is a popular Doctor: ", maxNumberOfVisits);
    }//GEN-LAST:event_btnFrequentlyVistedDoctorActionPerformed

    private void btnOrganisationWithMaximumDonorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrganisationWithMaximumDonorsActionPerformed
        Map<String,Integer> mostfundedOrg = new HashMap<String, Integer>();
        for (int i = 0; i < ecosystem.getDonationDirectory().getFundsDirectory().size(); i++) {
            FundsInfo fi=ecosystem.getDonationDirectory().getFundsDirectory().get(i);
            String name  = fi.getFundsOrgName();
            int number = 0;
            if(mostfundedOrg.containsKey(name))
            {
                number = mostfundedOrg.get(name);
            }
            number = number + 1;
            mostfundedOrg.put(name, number); 
        }
        
        float max =0;
        String fundedOrg = new String();
        for(String s : mostfundedOrg.keySet())
        {
            if(mostfundedOrg.get(s) > max)
            {
                max = mostfundedOrg.get(s);
                fundedOrg = s;
            }
        }
        
        populateJTable(fundedOrg + "received highest funds by Donors: " , max);
    }//GEN-LAST:event_btnOrganisationWithMaximumDonorsActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        showPanel.remove(this);
        CardLayout layout = (CardLayout) showPanel.getLayout();
        layout.previous(showPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnFrequentPatient;
    private javax.swing.JButton btnFrequentlyVisitedHospital;
    private javax.swing.JButton btnFrequentlyVistedDoctor;
    private javax.swing.JButton btnOrganisationWithMaximumDonors;
    private javax.swing.JButton btnOrganisationWithMaximumFunds;
    private javax.swing.JButton btnPrimeDonor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblToDisplayAnalytics;
    // End of variables declaration//GEN-END:variables
}
